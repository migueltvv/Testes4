// Generated by gencpp from file elevation_msgs/OccupancyElevation.msg
// DO NOT EDIT!


#ifndef ELEVATION_MSGS_MESSAGE_OCCUPANCYELEVATION_H
#define ELEVATION_MSGS_MESSAGE_OCCUPANCYELEVATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nav_msgs/OccupancyGrid.h>

namespace elevation_msgs
{
template <class ContainerAllocator>
struct OccupancyElevation_
{
  typedef OccupancyElevation_<ContainerAllocator> Type;

  OccupancyElevation_()
    : header()
    , occupancy()
    , height()
    , costMap()  {
    }
  OccupancyElevation_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , occupancy(_alloc)
    , height(_alloc)
    , costMap(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::nav_msgs::OccupancyGrid_<ContainerAllocator>  _occupancy_type;
  _occupancy_type occupancy;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _height_type;
  _height_type height;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _costMap_type;
  _costMap_type costMap;





  typedef boost::shared_ptr< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> const> ConstPtr;

}; // struct OccupancyElevation_

typedef ::elevation_msgs::OccupancyElevation_<std::allocator<void> > OccupancyElevation;

typedef boost::shared_ptr< ::elevation_msgs::OccupancyElevation > OccupancyElevationPtr;
typedef boost::shared_ptr< ::elevation_msgs::OccupancyElevation const> OccupancyElevationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::elevation_msgs::OccupancyElevation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::elevation_msgs::OccupancyElevation_<ContainerAllocator1> & lhs, const ::elevation_msgs::OccupancyElevation_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.occupancy == rhs.occupancy &&
    lhs.height == rhs.height &&
    lhs.costMap == rhs.costMap;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::elevation_msgs::OccupancyElevation_<ContainerAllocator1> & lhs, const ::elevation_msgs::OccupancyElevation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace elevation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3ebf7cb4dc4ae59b4871ecc06a3823f";
  }

  static const char* value(const ::elevation_msgs::OccupancyElevation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3ebf7cb4dc4ae59ULL;
  static const uint64_t static_value2 = 0xb4871ecc06a3823fULL;
};

template<class ContainerAllocator>
struct DataType< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "elevation_msgs/OccupancyElevation";
  }

  static const char* value(const ::elevation_msgs::OccupancyElevation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ElevationMap\n"
"Header header \n"
"\n"
"# original occupancy map data for the local map (access using: i.e. occupancy.data occupancy.info)\n"
"nav_msgs/OccupancyGrid occupancy\n"
"\n"
"# height info for each grid\n"
"float32[] height\n"
"\n"
"# cost map\n"
"float32[] costMap\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/OccupancyGrid\n"
"# This represents a 2-D grid map, in which each cell represents the probability of\n"
"# occupancy.\n"
"\n"
"Header header \n"
"\n"
"#MetaData for the map\n"
"MapMetaData info\n"
"\n"
"# The map data, in row-major order, starting with (0,0).  Occupancy\n"
"# probabilities are in the range [0,100].  Unknown is -1.\n"
"int8[] data\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/MapMetaData\n"
"# This hold basic information about the characterists of the OccupancyGrid\n"
"\n"
"# The time at which the map was loaded\n"
"time map_load_time\n"
"# The map resolution [m/cell]\n"
"float32 resolution\n"
"# Map width [cells]\n"
"uint32 width\n"
"# Map height [cells]\n"
"uint32 height\n"
"# The origin of the map [m, m, rad].  This is the real-world pose of the\n"
"# cell (0,0) in the map.\n"
"geometry_msgs/Pose origin\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::elevation_msgs::OccupancyElevation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.occupancy);
      stream.next(m.height);
      stream.next(m.costMap);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OccupancyElevation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::elevation_msgs::OccupancyElevation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::elevation_msgs::OccupancyElevation_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "occupancy: ";
    s << std::endl;
    Printer< ::nav_msgs::OccupancyGrid_<ContainerAllocator> >::stream(s, indent + "  ", v.occupancy);
    s << indent << "height[]" << std::endl;
    for (size_t i = 0; i < v.height.size(); ++i)
    {
      s << indent << "  height[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.height[i]);
    }
    s << indent << "costMap[]" << std::endl;
    for (size_t i = 0; i < v.costMap.size(); ++i)
    {
      s << indent << "  costMap[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.costMap[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ELEVATION_MSGS_MESSAGE_OCCUPANCYELEVATION_H
